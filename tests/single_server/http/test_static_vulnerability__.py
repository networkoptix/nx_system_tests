# Copyright 2018-present Network Optix, Inc. Licensed under MPL 2.0: www.mozilla.org/MPL/2.0/
import socket
import ssl
from http.client import HTTPResponse
from urllib import parse

from ca import default_ca
from directories import get_run_dir
from installation import ClassicInstallerSupplier
from mediaserver_scenarios.provisioned_mediaservers import FTMachinePool


def _send_request_via_socket(url, cert_path):
    parsed_url = parse.urlparse(url)
    body = (
        f"GET {parsed_url.path} HTTP/1.1\r\n"
        f"Host: {parsed_url.hostname}:{parsed_url.port}\r\n"
        "Accept: */*\r\n"
        "Connection: keep-alive\r\n\r\n"
        )
    encoded_body = body.encode()
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
    context.load_verify_locations(cert_path)
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
        with context.wrap_socket(sock, server_hostname=parsed_url.hostname) as ssl_sock:
            ssl_sock.connect((parsed_url.hostname, parsed_url.port))
            ssl_sock.sendall(encoded_body)
            with HTTPResponse(ssl_sock) as http_response:
                http_response.begin()
                return http_response


def _test_static_vulnerability(distrib_url, one_vm_type, api_version, exit_stack):
    installer_supplier = ClassicInstallerSupplier(distrib_url)
    pool = FTMachinePool(installer_supplier, get_run_dir(), api_version)
    one_mediaserver = exit_stack.enter_context(pool.one_mediaserver(one_vm_type))
    one_mediaserver.mediaserver().start()
    one_mediaserver.mediaserver().api.setup_local_system()
    mediaserver = one_mediaserver.mediaserver()
    filepath = mediaserver.dir / 'var' / 'web' / 'static' / 'test.file'
    filepath.parent.mkdir(parents=True, exist_ok=True)
    filepath.write_text('This is just a test file.')
    url = mediaserver.api.secure_url('static/../../test.file')
    # Since version 1.25 urllib interprets and removes dot segments from URLs.
    # For more details, please see: https://tools.ietf.org/html/rfc3986#section-5.2.4.
    # Send request using socket to make sure, that URL won't change.
    response = _send_request_via_socket(url=url, cert_path=default_ca().cert_path)
    assert response.status == 403
